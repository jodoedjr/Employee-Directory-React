{"version":3,"sources":["utils/API.js","components/Grid/index.js","components/Hero/index.js","components/PostsList/index.js","components/SearchForm/index.js","pages/Home.js","App.js","index.js"],"names":["axios","get","headers","Container","fluid","children","className","Hero","props","style","backgroundImage","PostsList","display","handleSortTable","length","Table","responsive","size","striped","bordered","hover","onClick","map","item","index","key","src","picture","thumbnail","alt","name","first","last","phone","email","dob","date","substring","SearchForm","value","search","onChange","handleInputChange","list","type","placeholder","id","Home","useState","allEmployees","setAllEmployees","setDisplay","ascending","sorted","setSorted","setSearch","useEffect","filter","employee","nameArray","split","indexOf","API","then","res","curr","data","results","compareDates","asc","a","b","aDate","Date","bDate","event","target","input","console","log","sort","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d348e58.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default {\n    //request random employee information\n    //returns object with results array of 50 entries with only names, emails, dob, phone # and pictures\n    getEmployeeInfo: function () {\n        return axios.get(\"https://randomuser.me/api/?results=50&inc=name,email,dob,phone,picture\", {\n            headers: {\n                'Content-Type': null\n            }\n        });\n    }\n}","import React from \"react\";\n\n// Exporting the Container, Row, and Col components from this file\n\n// This Container component allows us to use a bootstrap container without worrying about class names\nexport const Container = ({ fluid, children }) => {\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n};\n\n// This Row component lets us use a bootstrap row without having to think about class names\nexport const Row = ({ fluid, children }) => {\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n};\n\n// This Col component lets us size bootstrap columns with less syntax\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\nexport const Col = ({ size, children }) => {\n  return (\n    <div\n      className={size\n        .split(\" \")\n        .map(size => \"col-\" + size)\n        .join(\" \")}\n    >\n      {children}\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Hero(props) {\n  return (\n    <div className=\"hero text-center\" style={{ backgroundImage: `url(${props.backgroundImage})` }}>\n      {props.children}\n    </div>\n  );\n}\n\nexport default Hero;\n","import React from \"react\";\nimport Table from \"react-bootstrap/Table\";\n\nconst PostsList = ({ display, handleSortTable}) => {\n  return (\n    <div className=\"list-overflow-container\">\n      {display.length ? (\n        <Table responsive size=\"sm\" striped bordered hover>\n          <thead>\n            <tr>\n              <th>Image</th>\n              <th onClick={()=>handleSortTable(\"email\")}>Name</th>\n              {/* sorting by email makes handling names with non-Roman characters */}\n              <th onClick={()=>handleSortTable(\"phone\")}>Phone</th>\n              <th onClick={()=>handleSortTable(\"email\")}>Email</th>\n              <th onClick={()=>handleSortTable(\"dob\")}>DOB</th>\n            </tr>\n          </thead>\n          <tbody>\n            {display.map((item, index) => (\n              <tr key={index}>\n                <td><img src={item.picture.thumbnail} alt=\"employee\" className=\"img-responsive\"/></td>\n                <td>{item.name.first + \" \" +item.name.last}</td>\n                <td>{item.phone}</td>\n                <td>{item.email}</td>\n                <td>{item.dob.date.substring(0,10)}</td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      ) : (\n          <h3>Loading!</h3>\n        )}\n    </div>\n  );\n};\n\nexport default PostsList;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction SearchForm(props) {\n  return (\n    <div className=\"row search\">\n      <div className=\"offset-md-4 col-md-4\">\n        <input\n          value={props.search}\n          onChange={props.handleInputChange}\n          name=\"term\"\n          list=\"term\"\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Filter by name\"\n          id=\"term\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default SearchForm;\n","import React, { useEffect, useState } from \"react\";\nimport API from \"../utils/API\";\nimport { Container } from \"../components/Grid\";\nimport Hero from \"../components/Hero\";\nimport PostsList from \"../components/PostsList\";\nimport SearchForm from \"../components/SearchForm\";\n\nconst Home = (props) => {\n    const [allEmployees, setAllEmployees] = useState([]);\n    const [display, setDisplay] = useState([]);\n    const [sorted, setSorted] = useState({\n        ascending: false, //true if an item is sorted ascending, false descending\n        name: false,\n        phone: false,\n        email: false,\n        dob: false\n    });\n    const [search, setSearch] = useState(\"\");\n\n    useEffect(() => {\n        if (!(allEmployees && allEmployees.length)) { //on load, when array is empty\n            API.getEmployeeInfo()\n                .then(res => {\n                    //res.data.results is the array of people objects\n                    setAllEmployees(curr => [...curr, ...res.data.results]);\n                    setDisplay(curr => [...curr, ...res.data.results]);\n                })\n        } else { // filter display for search\n            //sets display state var to the result of calling filter on allEmployees looking for the value of search\n            setDisplay(() => [...allEmployees.filter(employee => {\n                let nameArray = employee.email.split(\"@\")[0].split(\".\"); // email field uses roman characters, name field may not\n                let name = `${nameArray[0]} ${nameArray[1]}`;\n                return name.indexOf(search) !== -1;\n            })])\n        }\n    }, [allEmployees, search, sorted]); //re-run useEffect when state var search changes\n\n    const handleInputChange = event => {\n        setSearch(event.target.value);\n    };\n\n    const handleSortTable = (input) => {\n        console.log(input);\n        switch (input) {\n            // case \"name\": //name returns the same result as sort by email, but email sorts reliably for non-Roman character names\n            case \"phone\":\n                if (sorted.phone) {//if already sorted by phone, switch ascending descending   \n                    setSorted({ ...sorted, ascending: !(sorted.ascending) });\n                } else {\n                    setSorted({ ...sorted, ascending: true, name: false, phone: true, email: false, dob: false });\n                }\n                if (sorted.ascending) {\n                    setDisplay(...allEmployees.sort((a, b) => (a.phone > b.phone) ? -1 : 1))\n                } else {\n                    setDisplay(...allEmployees.sort((a, b) => (a.phone <= b.phone) ? -1 : 1))\n                }\n                return;\n            case \"email\":\n                if (sorted.email) {//if already sorted by email, switch ascending descending\n                    setSorted({ ...sorted, ascending: !(sorted.ascending) });\n                } else {\n                    setSorted({ ...sorted, ascending: true, name: false, phone: false, email: true, dob: false });\n                }\n                if (sorted.ascending) {\n                    setDisplay(...allEmployees.sort((a, b) => (a.email > b.email) ? -1 : 1))\n                } else {\n                    setDisplay(...allEmployees.sort((a, b) => (a.email <= b.email) ? -1 : 1))\n                }\n                return;\n            case \"dob\":\n                if (sorted.dob) {//if already sorted by name, switch ascending descending\n                    setSorted({ ...sorted, ascending: !(sorted.ascending) });\n                } else {\n                    setSorted({ ...sorted, ascending: true, name: false, phone: false, email: false, dob: true });\n                }\n                if (sorted.ascending) {\n                    setDisplay(...allEmployees.sort((a,b) => compareDates(true,a,b)));\n                } else {\n                    setDisplay(...allEmployees.sort((a,b) => compareDates(false,a,b)));\n                }\n                return;\n            default:\n                return;\n        }\n    }\n\n    const compareDates = (asc,a,b) => {\n        let aDate = new Date(a.dob.date);\n        let bDate = new Date(b.dob.date);\n        if(asc){\n            return ((aDate > bDate) ? -1 : 1) // sort ascending, returns 1 if aDate is less than bDate\n        } else {\n            return ((aDate <= bDate) ? -1 : 1) // sort descending, returns -1 if aDate is less than bDate\n        }\n    }\n\n    return (\n        <div>\n            <Hero>\n                <h1>Employee Directory</h1>\n                <p>Click on headings to sort, or use the search box to filter by name</p>\n            </Hero>\n            <Container>\n                <SearchForm\n                    handleInputChange={handleInputChange}\n                    results={search}\n                />\n                <PostsList display={display} handleSortTable={handleSortTable} />\n            </Container>\n        </div>\n    )\n}\n\nexport default Home;","import React from 'react';\nimport Home from \"./pages/Home\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport './App.css';\n// import { EmployeeProvider } from \"./utils/GlobalState\";\n\nfunction App() {\n  return (\n    // <EmployeeProvider>\n      <Home/>\n    // </EmployeeProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}